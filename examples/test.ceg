(
(data Bool (True False))
(:: True Bool)
(:: False Bool)

(data Nat (Z S))
(:: Z Nat)
(:: S (-> (Nat) Nat))

(data List (a) (Nil Cons))
(:: Nil  (List ?a)                    )
(:: Cons (-> (?a (List ?a)) (List ?a)))

(:: id (-> (?a) ?a))
(let id (?x) ?x)

(:: inc (-> (Nat) Nat))
(let inc ?x (S ?x))

(:: add (-> (Nat Nat) Nat))
(let add (Z      ?y) ?y             )
(let add ((S ?x) ?y) (S (add ?x ?y)))

(:: sub (-> (Nat Nat) Nat))
(let sub (?x Z)          ?x         )
(let sub (Z ?y)          Z          )
(let sub ((S ?x) (S ?y)) (sub ?x ?y))

(:: lt (-> (Nat Nat) Bool))
(let lt (?x     Z     ) False     )
(let lt (Z      (S ?y)) True      )
(let lt ((S ?x) (S ?y)) (lt ?x ?y))

(:: leq (-> (Nat Nat) Bool))
(let leq (Z      ?y) True           )
(let leq ((S ?x) Z ) False          )
(let leq ((S ?x) (S ?y)) (leq ?x ?y))

(:: eq (-> (Nat Nat) Bool))
(let eq (Z      Z     ) True      )
(let eq (Z      (S ?y)) False     )
(let eq ((S ?x) Z     ) False     )
(let eq ((S ?x) (S ?y)) (eq ?x ?y))

(:: ite (-> (Bool ?a ?a) ?a))
(let ite (True ?x ?y ) ?x)
(let ite (False ?x ?y) ?y)

(:: head (-> (List ?a) ?a))
(let head (Nil) Z)
(let head ((Cons ?x ?xs)) ?x)

(:: map (-> ((-> ?a ?b) (List ?a)) (List ?b)))
(let map (?f Nil          ) Nil                          )
(let map (?f (Cons ?x ?xs)) (Cons ($ ?f ?x) (map ?f ?xs)))

(:: elem (-> (Nat (List Nat)) Bool))
(let elem (?n Nil          ) False                            )
(let elem (?n (Cons ?x ?xs)) (ite (eq ?n ?x) True (elem ?n ?xs)))

(:: append (-> ((List ?a) (List ?a)) (List ?a)))
(let append (Nil           ?ys) ?ys                       )
(let append ((Cons ?x ?xs) ?ys) (Cons ?x (append ?xs ?ys)))

(:: last (-> ((List a)) a))
(let last ((Cons ?x Nil)          ) ?x                  )
(let last ((Cons ?x (Cons ?y ?ys))) (last (Cons ?y ?ys)))

(:: lastOfTwo (-> ((List a) (List a)) a))
(let lastOfTwo (?xs Nil          ) (last ?xs)          )
(let lastOfTwo (?xs (Cons ?y ?ys)) (last (Cons ?y ?ys)))

(data Test (A B))
(:: A Test)
(:: B (-> (Nat) Test))

(:: testId (-> (Test) Nat))
(let let testId A A)
(let testId (B ?x) (B (natId ?x)))

(:: natId (-> (Nat) Nat))
(let natId Z Z)
(let natId (S ?x) (S (natId ?x)))

(:: min2 (-> (Nat Nat) Nat))
(let min2 (?m ?n) (ite (leq ?m ?n) ?m ?n))

(:: zero (-> (Bool (List Bool)) Nat))
(let zero (?b Nil)           Z            )
(let zero (?b (Cons ?y ?ys)) (zero ?y ?ys))

(:: revAcc (-> ((List ?a) (List ?a)) (List ?a)))
(let revAcc (Nil           ?acc) ?acc                       )
(let revAcc ((Cons ?x ?xs) ?acc) (revAcc ?xs (Cons ?x ?acc)))

(:: mapInc (-> ((List Nat)) (List Nat)))
(let mapInc (Nil) Nil)
(let mapInc ((Cons ?x ?xs)) (Cons (S ?x) (mapInc ?xs)))

(:: revInc (-> ((List Nat) (List Nat)) (List Nat)))
(let revInc (Nil           ?acc) ?acc                           )
(let revInc ((Cons ?x ?xs) ?acc) (revInc ?xs (Cons (S ?x) ?acc)))


(=== propRevInc (xs) ((List Nat))
  (map inc (revAcc xs Nil))
  (revInc xs)
)

(=== prop_61 (xs ys) ((List a) (List a))
  (last (append xs ys))
  (lastOfTwo xs ys)
)

(=== prop_nat (xs ys) ((List Nat) (List Nat))
  (last (append xs ys))
  (lastOfTwo xs ys)
)

(=== prop_32 (a b) (Nat Nat)
  (min2 a b)
  (min2 b a)
)

(=== prop_eq (x) (Nat)
  (ite (eq x x) True False)
  True
)

(=== prop_mark (xs ys) ((List Bool) (List Bool))
  (zero True xs)
  (zero False ys)
)

()


)
