(
(data Bool (True False))
(:: True Bool)
(:: False Bool)

(data Nat (Z S))
(:: Z Nat)
(:: S (-> (Nat) Nat))

(data List (Nil Cons))
(:: Nil List)
(:: Cons (-> (A List) List))

(:: add (-> (Nat Nat) Nat))
(=> (add Z      ?y) ?y             )
(=> (add (S ?x) ?y) (S (add ?x ?y)))

(:: take (-> (Nat List) List))
(=> (take Z      ?xs          ) Nil                    )
(=> (take (S ?n) Nil          ) Nil                    )
(=> (take (S ?n) (Cons ?x ?xs)) (Cons ?x (take ?n ?xs)))

(:: drop (-> (Nat List) List))
(=> (drop Z      ?xs          ) ?xs          )
(=> (drop (S ?n) Nil          ) Nil          )
(=> (drop (S ?n) (Cons ?x ?xs)) (drop ?n ?xs))

(:: append (-> (List List) List))
(=> (append Nil           ?ys) ?ys                       )
(=> (append (Cons ?x ?xs) ?ys) (Cons ?x (append ?xs ?ys)))

(:: map (-> ((-> A A) List) List))
(=> (map ?f Nil          ) Nil                      )
(=> (map ?f (Cons ?x ?xs)) (Cons (@ ?f ?x) (map ?f ?xs)))

(=== prop01 (n xs) (Nat List)
  (append (take n xs) (drop n xs))
  xs
)

(=== prop11 (xs) (List)
  (drop Z xs)
  xs
)

(=== prop12 (n f xs) (Nat (-> A A) List)
  (drop n (map f xs))
  (map f (drop n xs))
)

(=== prop13 (n x xs) (Nat A List)
  (drop (S n) (Cons x xs))
  (drop n xs)
)

(=== prop56 (n m xs) (Nat Nat List)
  (drop n (drop m xs))
  (drop (add n m) xs)
)

)