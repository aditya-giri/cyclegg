(
(data Bool (True False))
(:: True Bool)
(:: False Bool)

(data Nat (Z S))
(:: Z Nat)
(:: S (-> (Nat) Nat))

(data List (Nil Cons))
(:: Nil  (List ?a)                    )
(:: Cons (-> (?a (List ?a)) (List ?a)))

(:: ite (-> (Bool ?a ?a) ?a))
(=> (ite True ?x ?y ) ?x)
(=> (ite False ?x ?y) ?y)

(:: add (-> (Nat Nat) Nat))
(=> (add Z      ?y) ?y             )
(=> (add (S ?x) ?y) (S (add ?x ?y)))

(:: leq (-> (Nat Nat) Bool))
(=> (leq Z      ?y) True           )
(=> (leq (S ?x) Z ) False          )
(=> (leq (S ?x) (S ?y)) (leq ?x ?y))

(:: eq (-> (Nat Nat) Bool))
(=> (eq Z      Z     ) True      )
(=> (eq Z      (S ?y)) False     )
(=> (eq (S ?x) Z     ) False     )
(=> (eq (S ?x) (S ?y)) (eq ?x ?y))

(:: take (-> (Nat (List ?a)) (List ?a)))
(=> (take Z      ?xs          ) Nil                    )
(=> (take (S ?n) Nil          ) Nil                    )
(=> (take (S ?n) (Cons ?x ?xs)) (Cons ?x (take ?n ?xs)))

(:: drop (-> (Nat (List ?a)) (List ?a)))
(=> (drop Z      ?xs          ) ?xs          )
(=> (drop (S ?n) Nil          ) Nil          )
(=> (drop (S ?n) (Cons ?x ?xs)) (drop ?n ?xs))

(:: count (-> (Nat (List Nat)) Nat))
(=> (count ?x Nil          ) Z)
(=> (count ?x (Cons ?y ?ys)) (ite (eq ?x ?y) (S (count ?x ?ys)) (count ?x ?ys)))

(:: append (-> ((List ?a) (List ?a)) (List ?a)))
(=> (append Nil           ?ys) ?ys                       )
(=> (append (Cons ?x ?xs) ?ys) (Cons ?x (append ?xs ?ys)))

(:: map (-> ((-> ?a ?b) (List ?a)) (List ?b)))
(=> (map ?f Nil          ) Nil                          )
(=> (map ?f (Cons ?x ?xs)) (Cons (@ ?f ?x) (map ?f ?xs)))

(:: filter (-> (-> ?a Bool) (List ?a)) (List ?a))
(=> (filter ?p Nil          ) Nil                                                     )
(=> (filter ?p (Cons ?x ?xs)) (ite (@ ?p ?x) (Cons ?x (filter ?p ?xs)) (filter ?p ?xs)))

(=== prop01 (n xs) (Nat (List a))
  (append (take n xs) (drop n xs))
  xs
)

(=== prop02 (n xs ys) (Nat (List Nat) (List Nat))
  (add (count n xs) (count n ys))
  (count n (append xs ys))
)

(=== prop03 (n xs ys) (Nat (List Nat) (List Nat))
  (leq (count n xs) (count n (append xs ys)))
  True
)

(=== prop04 (n xs) (Nat (List Nat))
  (S (count n xs))
  (count n (Cons n xs))
)

(=== prop11 (xs) ((List a))
  (drop Z xs)
  xs
)

(=== prop12 (n f xs) (Nat (-> a b) (List a))
  (drop n (map f xs))
  (map f (drop n xs))
)

(=== prop13 (n x xs) (Nat a (List a))
  (drop (S n) (Cons x xs))
  (drop n xs)
)

(=== prop14 (p xs ys) ((-> a Bool) (List a) (List a))
  (filter p (append xs ys))
  (append (filter p xs) (filter p ys))
)

(=== prop56 (n m xs) (Nat Nat (List a))
  (drop n (drop m xs))
  (drop (add n m) xs)
)

)